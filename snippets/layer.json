{
    "卷积层": {
        "prefix": "pytorch:layer:conv",
        "description": "创建一个卷积层",
        "body": [
            "conv$1 = nn.Conv2d(in_channels=$2, out_channels=$3, kernel_size=3, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)"
        ]
    },
    "转置卷积层": {
        "prefix": "pytorch:layer:transpose_conv",
        "description": "创建一个转置卷积层",
        "body": [
            "conv_transpose$1 = nn.ConvTranspose2d(in_channels=$2, out_channels=$3, kernel_size=2, stride=2, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros', device=None, dtype=None)"
        ]
    },
    "池化层": {
        "prefix": "pytorch:layer:pooling",
        "description": "创建一个池化层",
        "body": [
            "pool$1 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, return_indices=False, ceil_mode=False)"
        ]
    },
    "激活函数层": {
        "prefix": "pytorch:layer:activation",
        "description": "创建一个非线性激活函数",
        "body": [
            "${1:act} = nn.${2|ReLU(inplace=False),Mish(inplace=False),SiLU(inplace=False),LeakyReLU(negative_slope=0.01\\, inplace=False),Hardsigmoid(inplace=False),Hardshrink(lambd=0.5),Hardtanh(min_val=-1\\, max_val=1\\, inplace=False\\, min_value=None\\, max_value=None),LogSigmoid,PReLU(num_parameters=1\\, init=0.25),ELU(alpha=1.\\, inplace=False),ReLU6(inplace=False),RReLU(lower=0.125\\, upper=0.3333333333333333\\, inplace=False),CELU(alpha=1.0\\, inplace=False),SELU(inplace=False),Sigmoid,Softplus(beta=1\\, threshold=20),Softshrink(lambd=0.5),Softsign,Tanh,Tanhshrink,Threshold(threshold\\, value\\, inplace=False),Softmin(dim=None),Softmax(dim=None),Softmax2d,LogSoftmax(dim=None),AdaptiveLogSoftmaxWithLogits(in_features\\, n_classes\\, cutoffs\\, div_value=4.0\\, head_bias=True)|}"
        ]
    },
    "批量归一化层": {
        "prefix": "pytorch:layer:batchnorm",
        "description": "创建一个批量归一化层",
        "body": [
            "bn$1 = nn.BatchNorm2d(out_channels=$2, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True, device=None, dtype=None)"
        ]
    },
    "容器层": {
        "prefix": "pytorch:layer:container",
        "description": "将模块或参数存储在某种容器中",
        "body": [
            "layers = nn.${1|Sequential,ModuleList,ModuleDict,ParameterList,ParameterDict|}($2)"
        ]
    },
    "线性层": {
        "prefix": "pytorch:layer:linear",
        "description": "创建一个线性层",
        "body": [
            "${1:linear} = nn.Linear(in_features=${2:10}, out_features=${3:5}, bias=${4|True,False|})"
        ]
    },
    "Dropout层": {
        "prefix": "pytorch:layer:dropout",
        "description": "创建一个 Dropout 层",
        "body": [
            "${1:dropout} = nn.Dropout(p=${2:0.5})"
        ]
    }
}